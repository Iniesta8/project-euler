// Problem 1
// Multiples of 3 and 5
//
// If we list all the natural numbers below 10 that are multiples of 3 or 5, we
// get 3, 5, 6 and 9. The sum of these multiples is 23. Find the sum of all the
// multiples of 3 or 5 below 1000.
pub fn multiples(n: u32) -> u32 {
    let mut sum: u32 = 0;
    for ele in 0..n {
        if ele % 3 == 0 || ele % 5 == 0 {
            sum += ele;
        }
    }
    sum
}

// Problem 2
// Even Fibonacci numbers
//
// Each new term in the Fibonacci sequence is generated by adding the previous
// two terms. By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5,
// 8, 13, 21, 34, 55, 89, ... By considering the terms in the Fibonacci sequence
// whose values do not exceed four million, find the sum of the even-valued
// terms.
pub fn even_fibonacci(n: u32) -> u32 {
    let mut x: u32 = 1;
    let mut y: u32 = 2;

    let mut sum: u32 = 0;

    while x < n {
        if x % 2 == 0 {
            sum += x;
        }
        let help = y;
        y += x;
        x = help;
    }
    sum
}

// Problem 3
// Largest prime factor
//
// The prime factors of 13195 are 5, 7, 13 and 29.
// What is the largest prime factor of the number 600851475143?
pub fn largest_prime_factor(mut n: i64) -> i64 {
    // let mut n: i64 = 600851475143;

    let mut p = 2;
    while n >= p * p {
        if n % p == 0 {
            n /= p;
        } else {
            p += 1;
        }
    }
    n
}

// Problem 4
// Largest palindrome product
//
// A palindromic number reads the same both ways. The largest palindrome made
// from the product of two 2-digit numbers is 9009 = 91 × 99. Find the largest
// palindrome made from the product of two 3-digit numbers.
fn prime_factors(mut n: i64) -> Vec<i64> {
    let mut factors = Vec::new();

    let mut p = 2;
    while n >= p * p {
        if n % p == 0 {
            factors.push(p);
            n /= p;
        } else {
            p += 1;
        }
    }
    factors.push(n);
    factors
}

fn is_palindromic_number(num: i64) -> bool {
    num.to_string() == num.to_string().chars().rev().collect::<String>()
}

pub fn largest_palindrome_product(mut n: i64, m: i64) -> i64 {
    while n >= m {
        if is_palindromic_number(n) {
            for p in (100..999).rev() {
                if n % p == 0 && (100..999).contains(&(n / p)) {
                    return n;
                }
            }
        }
        n -= 1;
    }
    -1
}

// Problem 5
// Smallest multiple
//
// 2520 is the smallest number that can be divided by each of the numbers from 1
// to 10 without any remainder. What is the smallest positive number that is
// evenly divisible by all of the numbers from 1 to 20?
#[allow(dead_code)]
pub fn clumsy_smallest_multiple(n: u64) -> u64 {
    for i in 1..u64::max_value() {
        for j in 1..n + 1 {
            if i % j != 0 {
                break;
            } else if j == n {
                return i;
            }
        }
    }
    0
}

pub fn smallest_multiple(n: i64) -> i64 {
    let mut factors: Vec<i64> = Vec::new();

    for p in 1..n + 1 {
        let pfs = prime_factors(p as i64); // pfs is always sorted

        for ele in &pfs {
            let a = pfs.iter().filter(|n| *n == ele).count();
            let b = factors.iter().filter(|n| *n == ele).count();

            let diff = if a > b {
                a - b
            } else {
                continue;
            };

            for _ in 0..diff {
                factors.push(*ele);
            }
            factors.sort();
        }
    }
    factors.iter().product()
}

// Problem 6
// Sum square difference
//
// The sum of the squares of the first ten natural numbers is,
// 1² + 2² + ... + 10² = 385
// The square of the sum of the first ten natural numbers is,
// (1 + 2 + ... + 10)² = 55² = 3025
// Hence the difference between the sum of the squares of the first ten natural
// numbers and the square of the sum is 3025 − 385 = 2640. Find the difference
// between the sum of the squares of the first one hundred natural numbers and
// the square of the sum.
pub fn sum_square_difference(n: u32) -> u32 {
    let mut sum_squares: u32 = 0;
    for i in 1..n + 1 {
        sum_squares += i.pow(2);
    }

    (1..n + 1).sum::<u32>().pow(2) - sum_squares
}

// Problem 7
// 100001st prime
//
// By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see
// that the 6th prime is 13. What is the 10 001st prime number?
#[allow(dead_code)]
fn clumsy_is_prime(n: u32) -> bool {
    if n <= 1 {
        return false;
    }
    for i in 2..n {
        if n % i == 0 {
            return false;
        }
    }
    true
}

fn is_prime(n: u32) -> bool {
    if n <= 3 {
        return n > 1;
    } else if n % 2 == 0 || n % 3 == 0 {
        return false;
    }
    let mut i = 5;
    while i * i <= n {
        if n % i == 0 || n % (i + 2) == 0 {
            return false;
        }
        i += 6;
    }
    true
}

pub fn nth_prime(n: u32) -> u32 {
    let mut count: u32 = 0;

    for i in 2..u32::max_value() {
        if is_prime(i) {
            count += 1;
            if count == n {
                return i;
            }
        }
    }
    0
}
